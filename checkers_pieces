import pygame
import numpy as np

arr = np.array(
    [[[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]], [[1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5],
                                                                        [1, 6],
     [1, 7]], [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7]],
     [[3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7]], [[4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5],
                                                                        [4, 6],
     [4, 7]], [[5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7]],
     [[6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7]], [[7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5],
                                                                        [7, 6],
                                                                        [7, 7]]])
coordinates = np.multiply(arr, 59)
coordinates = np.add(coordinates, -29.5)
X = 472
Y = 472
pygame.init()
rootDisplay = pygame.display.set_mode((X, Y))

board = pygame.image.load('./checkersBoard.png')
white = (0, 0, 0)
rootDisplay.fill(white)
rootDisplay.blit(board, (0, 0))


class Pieces:
    def __init__(self, location, color, number):
        self.coordinates = coordinates
        self.position = location
        self.color = color
        self.rbg = (0, 0, 0)
        if self.color == 'b':
            self.rgb = (60, 60, 60)
        if self.color == 'r':
            self.rgb = (100, 0, 0)
        self.number = number
        self.currentLoc = self.coordinates[self.number][self.position]
        self.surface = pygame.Surface((250, 250))
        pygame.draw.circle(self.surface, self.rgb, (59, 59), 21)
        self.surface.set_colorkey((0, 0, 0))
        rootDisplay.blit(self.surface, (29.5 + 59 * (self.number - 1), 29.5 + 59 * (self.position - 1)))

    def get_info(self):
        return self.number, self.position

    def move_left(self):
        if self.color == 'b':
            self.position -= 1
            self.number -= 1
            if self.position < 0 or self.position > 7 or self.number < 0 or self.number > 7:
                self.position += 1
                self.number += 1
                return
            rootDisplay.blit(self.surface, (self.coordinates[self.number][self.position]))
            pygame.draw.rect(rootDisplay, (0, 0, 0), (59 * (self.number + 1), 59 * (self.position + 1), 59, 59))
        elif self.color == 'r':
            self.position += 1
            self.number += 1
            if self.position < 0 or self.position > 7 or self.number < 0 or self.number > 7:
                self.position -= 1
                self.number -= 1
                return
            rootDisplay.blit(self.surface, (self.coordinates[self.number][self.position]))
            pygame.draw.rect(rootDisplay, (0, 0, 0), (59 * (self.number - 1), 59 * (self.position - 1), 59, 59))

    def move_right(self):
        if self.color == 'b':
            self.position -= 1
            self.number += 1
            if self.position < 0 or self.position > 7 or self.number < 0 or self.number > 7:
                self.position += 1
                self.number -= 1
                return
            rootDisplay.blit(self.surface, (self.coordinates[self.number][self.position]))
            pygame.draw.rect(rootDisplay, (0, 0, 0), (59 * (self.number + 1), 59 * (self.position - 1), 59, 59))
        if self.color == 'r':
            self.position += 1
            self.number -= 1
            if self.position < 0 or self.position > 7 or self.number < 0 or self.number > 7:
                self.position -= 1
                self.number += 1
                return
            rootDisplay.blit(self.surface, (self.coordinates[self.number][self.position]))
            pygame.draw.rect(rootDisplay, (0, 0, 0), (59 * (self.number - 1), 59 * (self.position + 1), 59, 59))
